#!/usr/bin/env ruby
require 'optparse'

require 'bulldozer'
require 'bulldozer/third/kernel_utils'

module Bulldozer
  class Dozer
    def initialize(require, options)
      @require = require
      @options = options

      # Why do this as an option at all if it's required?
      @queue_name = @options.fetch(:queue)
      @queue = Bulldozer::RabbitMQ.channel.queue(@queue_name, :passive => true)
    end

    def run
      require_path = File.expand_path('.', @require)
      load(require_path)

      if defined?(bulldozer_init)
        Bulldozer.log.info('Calling top-level bulldozer_init method')
        bulldozer_init
      end

      @queue.subscribe(:ack => true) do |delivery_info, properties, content|
        begin
          process(delivery_info, properties, content)
        rescue StandardError => e
          # TODO: do something else here?
          Bulldozer.log.error("Error in Dozer: #{e} (#{e.class})\n  #{e.backtrace.join("\n  ")}")
        end
      end

      # This is kind of silly, but ok
      while true
        begin
          Bulldozer::RabbitMQ.bunny.event_loop.run_once
        rescue Timeout::Error => e
          raise unless e.message == 'IO timeout when reading 7 bytes'
        end
      end
    end

    def process(delivery_info, properties, content)
      data = Bulldozer::SERIALIZER.load(content)
      Bulldozer.log.debug("Dozer received a new job: #{data.inspect[0...1000]}")
      job = data.fetch('job')

      klass_name = job.fetch('class')
      method = job.fetch('method')
      arguments = job.fetch('arguments')

      # Note: this sanity checking prevents bugs, but should *not* be
      # considered protection against arbitrary code execution. Only
      # run Bulldozer with trusted clients.
      klass = Bulldozer::Third::KernelUtils.fetch_class(klass_name)
      unless klass < Bulldozer::RPC
        raise "Invalid RPC: #{klass} does not mixin Bulldozer::RPC"
      end
      klass.invoke_rpc(method, *arguments)

      Bulldozer::RabbitMQ.ack(delivery_info[:delivery_tag])
    end
  end
end

def main
  options = {:server => 'localhost'}
  optparse = OptionParser.new do |opts|
    opts.banner = "Usage: #{$0} [options] REQUIRE"

    opts.on('-h', '--help', 'Display this message') do
      puts opts
      exit(1)
    end

    opts.on('-q QUEUE', '--queue', 'Which queue to watch for jobs on') do |queue|
      options[:queue] = queue
    end

    opts.on('-s SERVER', '--server', 'What RabbitMQ server to connect to') do |server|
      options[:server] = server
    end
  end
  optparse.parse!

  if ARGV.length != 1
    puts optparse
    return 1
  end

  Bulldozer::RabbitMQ.connect_sync(options[:server])

  runner = Bulldozer::Dozer.new(ARGV[0], options)
  runner.run
  return 0
end

ret = main
begin
  exit(ret)
rescue TypeError
  exit(0)
end
