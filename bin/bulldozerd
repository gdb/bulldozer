#!/usr/bin/env ruby
require 'optparse'

require 'eventmachine'
require 'bulldozer'

module Bulldozer
  class Bulldozerd
    def initialize(basedir)
      @basedir = basedir
      @workers = {}
    end

    def prepare_workers(repo)

      Bulldozer::WorkerPool.new()
    end

    def run
      Bulldozer::RabbitMQ.job_queue.subscribe(:ack => true) do |headers, payload|
        # TODO: report failed jobs in some way
        job = JSON.parse(payload)
        Bulldozer.log.debug("Got a new job: #{payload.inspect}")

        repo_spec = job['repo']
        repo = Bulldozer::Repo.from_spec(repo_spec, @basedir)
        repo.ensure_checkout

        entry_point = job['entry_point']
        workers = Bulldozer::WorkerPool.new(repo, entry_point)
        workers.spawn

        # Bulldozer::RabbitMQ.ack(headers.delivery_tag)
      end
    end
  end
end

def main
  options = {}
  optparse = OptionParser.new do |opts|
    opts.banner = "Usage: #{$0} [options]"

    opts.on('-v', '--verbosity', 'Verbosity of debugging output') do
      $log.level -= 1
    end

    opts.on('-h', '--help', 'Display this message') do
      puts opts
      exit(1)
    end
  end
  optparse.parse!

  if ARGV.length != 0
    puts optparse
    return 1
  end

  EM.run do
    Bulldozer::RabbitMQ.connect_async

    runner = Bulldozer::Bulldozerd.new('/tmp/bulldozer')
    runner.run
  end
  return 0
end

if $0 == __FILE__
  ret = main
  begin
    exit(ret)
  rescue TypeError
    exit(0)
  end
end
