#!/usr/bin/env ruby
require 'optparse'
require 'fileutils'

require 'eventmachine'
require 'bulldozer'

module Bulldozer
  class Bulldozerd
    def initialize(basedir)
      @basedir = basedir
      @workers = {}
    end

    def prepare_worker_pool(job)
      repo_spec = job.fetch('repo')

      # TODO: better hash key?
      unless @workers[repo_spec]
        repo = Bulldozer::Repo.from_spec(repo_spec, @basedir)
        repo.ensure_checkout

        workers = Bulldozer::WorkerPool.new(repo)
        workers.spawn

        @workers[repo_spec] = workers
      end

      @workers[repo_spec]
    end

    def run
      Bulldozer::RabbitMQ.job_queue.subscribe(:ack => true) do |headers, payload|
        # TODO: report failed jobs in some way
        job = Bulldozer::SERIALIZER.load(payload)
        Bulldozer.log.debug("Bulldozerd received a new job: #{job.inspect[0...1000]}")

        worker_pool = prepare_worker_pool(job)
        worker_pool.transmit(job)

        Bulldozer::RabbitMQ.ack(headers.delivery_tag)
      end
    end
  end
end

def main
  options = {:server => 'localhost', :path => '/tmp/bulldozer'}
  optparse = OptionParser.new do |opts|
    opts.banner = "Usage: #{$0} [options]"

    opts.on('-v', '--verbosity', 'Verbosity of debugging output') do
      $log.level -= 1
    end

    opts.on('-h', '--help', 'Display this message') do
      puts opts
      exit(1)
    end

    opts.on('-s RABBITMQSERVER', '--server', 'Which RabbitMQ to connect to') do |server|
      options[:server] = server
    end

    opts.on('-p CODEPATH', '--path', 'Where to store checkouts') do |path|
      FileUtils.mkdir_p(path)
      options[:path] = path
    end
  end
  optparse.parse!

  if ARGV.length != 0
    puts optparse
    return 1
  end

  EM.run do
    Bulldozer::RabbitMQ.connect_async(options[:server])

    runner = Bulldozer::Bulldozerd.new(options[:path])
    runner.run
  end
  return 0
end

if $0 == __FILE__
  ret = main
  begin
    exit(ret)
  rescue TypeError
    exit(0)
  end
end
